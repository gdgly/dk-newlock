<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\lock.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\lock.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat Apr 14 20:06:58 2018
<BR><P>
<H3>Maximum Stack Usage =       1080 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; test_dev &rArr; test_gprs &rArr; gprs_send_at &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[41]">AES_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[42]">COMP_ACQ_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[1f]">DAC_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[40]">DMA2_Channel5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l1xx_it.o(i.PendSV_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[37]">SDIO_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[39]">SPI3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l1xx_it.o(i.SVC_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l1xx_it.o(i.SysTick_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l1xx_hd.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[38]">TIM5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[3b]">UART5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l1xx_hd.o(.text)
 <LI><a href="#[46]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[43]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[47]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[51]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[cd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ce]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[cf]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_data
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_test
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gprs
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ae]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
</UL>

<P><STRONG><a name="[4c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[48]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[50]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[52]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[82]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[53]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[80]"></a>ADC_DelaySelectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_DelaySelectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[7f]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l1xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[81]"></a>ADC_PowerDownCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_PowerDownCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DATA_EEPROM_EraseWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_EraseWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DATA_EEPROM_EraseWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
</UL>

<P><STRONG><a name="[57]"></a>DATA_EEPROM_FastProgramByte</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_FastProgramByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_data
</UL>

<P><STRONG><a name="[58]"></a>DATA_EEPROM_FastProgramWord</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_FastProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
</UL>

<P><STRONG><a name="[a8]"></a>DATA_EEPROM_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_data
</UL>

<P><STRONG><a name="[a7]"></a>DATA_EEPROM_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_data
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[97]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[98]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[56]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_gpio_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_gpio_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_gpio_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_gpio_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_gpio_init
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_gpio_init
</UL>

<P><STRONG><a name="[84]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_port_value
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reversal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_bell
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reversal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_bell
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>MD5Final</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_md5.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFile_MD5_Checksum
</UL>

<P><STRONG><a name="[62]"></a>MD5Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_md5.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFile_MD5_Checksum
</UL>

<P><STRONG><a name="[5c]"></a>MD5Update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_md5.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MD5Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFile_MD5_Checksum
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[61]"></a>MakeFile_MD5_Checksum</STRONG> (Thumb, 86 bytes, Stack size 112 bytes, app_md5.o(i.MakeFile_MD5_Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MakeFile_MD5_Checksum &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nvic_init
</UL>

<P><STRONG><a name="[94]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nvic_init
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[a1]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[6a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[a2]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[54]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[86]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_hsi_init
</UL>

<P><STRONG><a name="[71]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, stm32l1xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[64]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_hsi_init
</UL>

<P><STRONG><a name="[9f]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[99]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[96]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[87]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_hsi_init
</UL>

<P><STRONG><a name="[9a]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[9b]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[9d]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[9c]"></a>RCC_PLLConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[9e]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[63]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32l1xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_ms
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[67]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[69]"></a>TIM_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32l1xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[66]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l1xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[c5]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[c3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l1xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[73]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
</UL>

<P><STRONG><a name="[6b]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l1xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32l1xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>USART_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, stm32l1xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[72]"></a>USART_OUT</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, usart.o(i.USART_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_shake_alarm
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_self_checking
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_bell
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_close
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gprs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d7]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[75]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[d8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[d9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[da]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7c]"></a>adc_gpio_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, adc.o(i.adc_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[7e]"></a>adc_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = adc_init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PowerDownCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelaySelectionConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[83]"></a>bsp_get_port_value</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp.o(i.bsp_get_port_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_get_port_value
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan
</UL>

<P><STRONG><a name="[8b]"></a>bsp_gpio_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.bsp_gpio_init))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[85]"></a>bsp_hsi_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(i.bsp_hsi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_hsi_init &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[88]"></a>bsp_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = bsp_init &rArr; usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_gpio_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_gpio_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_gpio_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rcc_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_nvic_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_hsi_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_gpio_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_gpio_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>bsp_nvic_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp.o(i.bsp_nvic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_nvic_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[89]"></a>bsp_rcc_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, bsp.o(i.bsp_rcc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_rcc_init &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[a3]"></a>button_ds_get_value</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, button.o(i.button_ds_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = button_ds_get_value &rArr; button_scan &rArr; bsp_get_port_value
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>button_gpio_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, button.o(i.button_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = button_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[a4]"></a>button_scan</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, button.o(i.button_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = button_scan &rArr; bsp_get_port_value
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_port_value
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_shake_alarm
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_self_checking
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_ds_get_value
</UL>

<P><STRONG><a name="[68]"></a>button_timer_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, button.o(i.button_timer_ms))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>eeprom_read_data</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, flash.o(i.eeprom_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eeprom_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>eeprom_write_data</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, flash.o(i.eeprom_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eeprom_write_data &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Lock
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>gprs_gpio_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gprs.o(i.gprs_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gprs_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[a9]"></a>gprs_power_on</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gprs.o(i.gprs_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gprs_power_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gprs
</UL>

<P><STRONG><a name="[ad]"></a>gprs_send_at</STRONG> (Thumb, 174 bytes, Stack size 536 bytes, gprs.o(i.gprs_send_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = gprs_send_at &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay_1ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gprs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
</UL>

<P><STRONG><a name="[76]"></a>itoa</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, common.o(i.itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
</UL>

<P><STRONG><a name="[af]"></a>lock_bell</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lock.o(i.lock_bell))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lock_bell &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
</UL>

<P><STRONG><a name="[8e]"></a>lock_gpio_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lock.o(i.lock_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lock_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[b0]"></a>lock_self_checking</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, lock.o(i.lock_self_checking))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lock_self_checking &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reversal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
</UL>

<P><STRONG><a name="[b4]"></a>lock_shake_alarm</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lock.o(i.lock_shake_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lock_shake_alarm &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 454 bytes, Stack size 152 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = main &rArr; test_dev &rArr; test_gprs &rArr; gprs_send_at &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_test
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_ds_get_value
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFile_MD5_Checksum
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[be]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>

<P><STRONG><a name="[b1]"></a>motor_forward</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.motor_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_self_checking
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_close
</UL>

<P><STRONG><a name="[8f]"></a>motor_gpio_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, motor.o(i.motor_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = motor_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[b2]"></a>motor_reversal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.motor_reversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_reversal
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_self_checking
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_close
</UL>

<P><STRONG><a name="[b3]"></a>motor_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_self_checking
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_close
</UL>

<P><STRONG><a name="[ba]"></a>queue_en</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, queue.o(i.queue_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_en
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_full
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_test
</UL>

<P><STRONG><a name="[bb]"></a>queue_full</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, queue.o(i.queue_full))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
</UL>

<P><STRONG><a name="[bd]"></a>queue_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, queue.o(i.queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = queue_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_test
</UL>

<P><STRONG><a name="[b6]"></a>queue_test</STRONG> (Thumb, 80 bytes, Stack size 192 bytes, queue.o(i.queue_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = queue_test &rArr; queue_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_traverse
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_en
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>queue_traverse</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.queue_traverse))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_test
</UL>

<P><STRONG><a name="[b8]"></a>test_dev</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, test.o(i.test_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = test_dev &rArr; test_gprs &rArr; gprs_send_at &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_shake_alarm
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_self_checking
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_bell
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_close
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_gprs
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>test_gprs</STRONG> (Thumb, 194 bytes, Stack size 216 bytes, test.o(i.test_gprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = test_gprs &rArr; gprs_send_at &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
</UL>

<P><STRONG><a name="[c1]"></a>test_lock_close</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, test.o(i.test_lock_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = test_lock_close &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reversal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
</UL>

<P><STRONG><a name="[c0]"></a>test_lock_open</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, test.o(i.test_lock_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = test_lock_open &rArr; USART_OUT &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reversal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
</UL>

<P><STRONG><a name="[93]"></a>timer2_init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timer.o(i.timer2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer2_init &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[a5]"></a>timer_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.timer_delay))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan
</UL>

<P><STRONG><a name="[ab]"></a>timer_delay_1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.timer_delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_power_on
</UL>

<P><STRONG><a name="[6e]"></a>timer_is_timeout_1ms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.timer_is_timeout_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_is_timeout_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_self_checking
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_bell
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_send_at
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_open
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lock_close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>usart1_init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, usart.o(i.usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[b9]"></a>usart1_recv_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.usart1_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart1_recv_data &rArr; usart_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_is_timeout_1ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dev
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>usart2_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usart.o(i.usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[8d]"></a>usart_gpio_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, usart.o(i.usart_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[c9]"></a>usart_send_data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart.o(i.usart_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65]"></a>SetSysClock</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, system_stm32l1xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5f]"></a>Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_md5.o(i.Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[5b]"></a>Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_md5.o(i.Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[5e]"></a>MD5Transform</STRONG> (Thumb, 1906 bytes, Stack size 96 bytes, app_md5.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[78]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[7b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
